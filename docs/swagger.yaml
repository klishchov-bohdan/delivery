basePath: /
definitions:
  models.ResponseToken:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      passwordHash:
        type: string
      updatedAt:
        type: string
    type: object
  models.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.UserRegistrationRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: bogdan.bogdan2525@gmail.com
  description: Simple swagger implementation in Go HTTP
  title: Go Restful API with Swagger
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login
      operationId: user-login
      parameters:
      - description: Auth Login Input
        in: body
        name: authLogin
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseToken'
      summary: Login
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: Logout
      operationId: user-logout
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - auth
  /profile:
    get:
      consumes:
      - application/json
      description: Profile
      operationId: user-profile
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - ApiKeyAuth: []
      summary: Profile
      tags:
      - user
  /refresh:
    post:
      consumes:
      - application/json
      description: Refresh
      operationId: user-refresh
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseToken'
      security:
      - ApiKeyAuth: []
      summary: Refresh
      tags:
      - auth
  /registration:
    post:
      consumes:
      - application/json
      description: Registration
      operationId: user-registration
      parameters:
      - description: Auth Registration Input
        in: body
        name: authRegistration
        required: true
        schema:
          $ref: '#/definitions/models.UserRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseToken'
      summary: Registration
      tags:
      - auth
swagger: "2.0"
